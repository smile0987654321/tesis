package Amavis::Custom;
use strict;
use warnings;
use FileHandle;
no warnings qw(uninitialized redefine);

# GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON mydb.* TO 'admin'@'localhost' IDENTIFIED by '123456';

# CREATE TABLE users (email varchar(255) NOT NULL UNIQUE, present char(1));
# ALTER TABLE users ADD role tinyint;
# ALTER TABLE users ADD superior varchar(255);

# INSERT INTO users VALUES ('test@abc.com',       'N');
# INSERT INTO users VALUES ('absent@abc.com',     'N');
# INSERT INTO users VALUES ('postmaster@abc.com', 'Y');
# INSERT INTO users VALUES ('xandros@abc.com',    'Y', 1, 'vivita@abc.com');
# INSERT INTO users VALUES ('royce@abc.com',      'Y', 1, 'simon@abc.com');
# INSERT INTO users VALUES ('vivita@abc.com',     'Y', 2, 'walter@abc.com');
# INSERT INTO users VALUES ('simon@abc.com',      'Y', 2, 'craig@abc.com');
# INSERT INTO users VALUES ('walter@abc.com',     'Y', 3, NULL);
# INSERT INTO users VALUES ('craig@abc.com',      'Y', 3, NULL);

use DBI qw(:sql_types);
use DBD::mysql;
BEGIN {
  import Amavis::Conf qw(:platform :confvars c cr ca $myhostname);
  import Amavis::Util qw(do_log untaint safe_encode safe_decode);
  import Amavis::rfc2821_2822_Tools;
  import Amavis::Notify qw(build_mime_entity);
}

sub new {
  my($class,$conn,$msginfo) = @_;
  my($self) = bless {}, $class;
  my($conn_h) = Amavis::Out::SQL::Connection->new(
    ['DBI:mysql:database=mydb;host=127.0.0.1', 'admin', '123456'] );
  $self->{'conn_h'} = $conn_h;
  $self;  # returning an object activates further callbacks,
          # returning undef disables them
}

sub checks {
  my($self,$conn,$msginfo) = @_;
  # $self    ... whatever was returned by new()
  # $conn    ... object with information about a SMTP connection
  # $msginfo ... object with info. about a mail message being processed  

  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM: Running checks()");
  
  # calling main program
  main_controller($self,$conn,$msginfo);
}

sub before_send {
  my($self,$conn,$msginfo) = @_;
  # $self    ... whatever was returned by new()
  # $conn    ... object with information about a SMTP connection
  # $msginfo ... object with info. about a mail message being processed

  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM: Running before_send()");  
}

# description:
# main program
# parameter(s):
# - $self : carrying DB connection/handler
# - $conn : object with information about a SMTP connection
# - $msginfo : object with info about a mail message being processed including raw body constaining attachment that's going to be extracted
# return:
# - $?
sub main_controller {
  my($self,$conn,$msginfo) = @_;
  # $self    ... whatever was returned by new()
  # $conn    ... object with information about a SMTP connection
  # $msginfo ... object with info. about a mail message being processed  

  my($sub_name)= (caller(0))[3];
  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM: %s Running main_controller()", $sub_name);

  my($sender) = $msginfo->sender;  # envelope sender address, e.g. 'usr@e.com'
  do_log($ll,"CUSTOM: %s Envelope sender: <%s>", $sub_name, $sender);

  my(@local_domains) = ("abc.com", "mx.abc.com", "mail.abc.com"); # TODO: put in configuration

  # check for incoming mail as it won't be handled by this custom hook
  my($localpart,$domain) = split_address($sender);
  $domain =~ s/@//;
  do_log($ll,"CUSTOM: %s Sender's domain is: %s", $sub_name, $domain);
  if (!grep {$_ eq $domain} @local_domains) { # if sender's domain is not in local domain list
    do_log($ll,"CUSTOM: %s Incoming email will not be handled by this custom hook", $sub_name);
    do_log($ll,"CUSTOM: %s Exiting main_controller()", $sub_name);
    return;
  }

  # get the direct supervisor and the role of the sender
  my($role_level,$supervisor) = hierarchy_controller($self,$sender);
  do_log($ll,"CUSTOM: %s Role retrieved from hierarchy_controller(): %s", $sub_name, $role_level);
  do_log($ll,"CUSTOM: %s Supervisor retrieved from hierarchy_controller(): %s", $sub_name, $supervisor);

  # check sender and receiver, if receiver is the postmaster@company.com and sender has user-level more than 1,
  # then process needs to be handled by check_email_notification_reply(),
  # otherwise process goes to attachment_manager()  
  my $first_recip = ${$msginfo->per_recip_data}[0];
  my $first_recip_address = $first_recip->recip_addr;
  do_log($ll,"CUSTOM: %s First recipient address is: %s", $sub_name, $first_recip_address);  
  if ($role_level > 1 && $first_recip_address eq 'postmaster@abc.com') { # TODO: avoid hardcode
    do_log($ll,"CUSTOM: %s Going to check_email_notification_reply()", $sub_name);
    check_email_notification_reply($self,$msginfo);
    do_log($ll,"CUSTOM: %s Exiting main_controller()", $sub_name);
    return;
  }

  # get the message temporary location
  my($mailinfo) = $msginfo->mail_text_fn;
  do_log($ll,"CUSTOM: %s mail_text_fn: %s", $sub_name, $mailinfo);

  # get document(s) level 
  my @document_level = attachment_manager($self,$msginfo);
  my $no_of_attachment = @document_level;
  do_log($ll,"CUSTOM: %s Number of attachment is: %s", $sub_name, $no_of_attachment);
  if ($no_of_attachment == 0) { # no attachment
    do_log($ll,"CUSTOM: %s Exiting main_controller()", $sub_name);
    return;
  }

  # examine some data pertaining to the each recipient of the message
  for my $r (@{$msginfo->per_recip_data}) { # $r contains per-recipient data
    my($recip) = $r->recip_addr; # recipient envelope address, e.g. rc@ex.com
    do_log($ll,"CUSTOM: %s Envelope recipient: <%s>", $sub_name, $recip);

    # sending attachment internally won't be handled
    my($username,$recip_domain) = split_address($recip);
    $recip_domain =~ s/@//;
    do_log($ll,"CUSTOM: %s Recipient's domain is: %s", $sub_name, $recip_domain);
    if (grep {$_ eq $recip_domain} @local_domains) { # if recipient's domain is in local domain list ($r->recip_is_local) ??
      do_log($ll,"CUSTOM: %s Skip processing internal email", $sub_name);
      next;
    }

    do_log($ll,"CUSTOM: %s Processing email", $sub_name);
    foreach (@document_level) {
      if ($_ <= $role_level) { # compare document level to sender's role level
        # sender is qualified to send this document
        next;
      } else {
        # sender needs approval to send this document
        notification_manager($self,$msginfo,$_,$role_level);

      }
    } # end foreach
  } # end for

  do_log($ll,"CUSTOM: %s Subroutine is finished", $sub_name);
} # end main_controller()

# description:
# handle approval procedure for sending document outside
# parameter(s):
# - $self : carrying DB connection/handler
# - $msginfo : object with info about a mail message being processed including raw body constaining attachment that's going to be extracted
# return:
# - $?
sub check_email_notification_reply {
  my($self,$msginfo) = @_;

  my($sub_name)= (caller(0))[3];
  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM: %s Running check_email_notification_reply()", $sub_name);

  # TODO: process email notification reply in check_email_notification_reply()
} # end check_email_notification_reply()

# description:
# handle approval procedure for sending document outside
# parameter(s):
# - $self : carrying DB connection/handler
# - $msginfo : object with info about a mail message being processed including raw body constaining attachment that's going to be extracted
# - $document_level :
# - $role_level :
# return:
# - $?
sub notification_manager {
  my($self,$msginfo,$document_level,$role_level) = @_;

  my($sub_name)= (caller(0))[3];
  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM: %s Running notification_manager()", $sub_name);

  # first, quarantine the mail because the role level is lower than the document level
  do_log($ll,"CUSTOM: %s Processing message quarantine", $sub_name);
  Amavis::do_quarantine($msginfo, undef, ['clean-quarantine'], 'local:sample-%m');
  do_log($ll,"CUSTOM: %s Message quarantine completed", $sub_name);
  
} # end notification_manager()

# description:
# use python's document_manager module to check the email attachment's importance
# parameter(s):
# - $self : carrying DB connection/handler
# - $msginfo : object with info about a mail message being processed including raw body constaining attachment that's going to be extracted
# return:
# - @doc_mgr_class_result : the level of documents classification, 1 being normal/unclassified document, 2 and so on being more and more important along with the level increment. Size of array signifies the number of attachment.
# - $?
sub attachment_manager {
  my($self,$msginfo) = @_;
  my(@doc_mgr_class_result);

  my($sub_name)= (caller(0))[3];
  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
	do_log($ll,"CUSTOM: %s Running attachment_manager()", $sub_name);

  # TODO: need to cover multiple attachments

  # MIME::Entity for the message
  my $the_mime_entity = $msginfo->mime_entity;
  do_log($ll,"CUSTOM: %s MIME Entity retrieved", $sub_name);

  # get the attachment object
  my $parts = $the_mime_entity->parts(1);
  if ( defined($parts) ) {
    my $ct = $parts->head->get('content-type');
    chomp($ct); # clean the trailing new line
    do_log($ll,"CUSTOM: %s content-type retrieved: %s", $sub_name, $ct);
    
    #TODO: handle this "attachment;\n filename=example.pdf;\n size=11487" send from roundcube

    # get the attachment file name
    my $fn = $parts->head->get('content-disposition');
    $fn =~ s/^[^"]*"//; # clean string up to first double quote
    $fn =~ s/"$//; # clean string from second double quote onwards
    chomp($fn); # clean the trailing new line
    my $attachment_name = untaint($fn);
    do_log($ll,"CUSTOM: %s attachment file name: %s", $sub_name, $fn);

    # rebuild attachment file in temporary folder
    my $body = $parts->bodyhandle;
    my $fh = FileHandle->new;
    if ( $fh->open(">/var/lib/amavis/tmp/".$attachment_name)) { # TODO: avoid hardcoding temporary path
      $body->print($fh);
      do_log($ll,"CUSTOM: %s file printed", $sub_name);
    }
  } else {
    do_log($ll,"CUSTOM: %s No attachment found", $sub_name);
    do_log($ll,"CUSTOM: %s Exiting attachment_manager()", $sub_name);
    return @doc_mgr_class_result;
  }

  # call python module document_manager() to get document classification result
  do_log($ll,"CUSTOM: %s Calling Python module document_manager()", $sub_name);
  my $document_manager_result = `/home/sam/tesis/document_manager.py`; # TODO: avoid hardcoding
  do_log($ll,"CUSTOM: %s Result retrieved from document manager(): %s", $sub_name, $document_manager_result);
  push @doc_mgr_class_result, $document_manager_result;
  do_log($ll,"CUSTOM: %s Add result retrieved from document manager() to array", $sub_name);

  return @doc_mgr_class_result;
} # end attachment_manager()

# description:
# determine the supervisor and role of an email sender
# parameter(s):
# - $self : carrying DB connection/handler
# - $sender : email sender
# return:
# - $role : sender's role in the organization
# - $supervisor : sender's direct supervisor's email in the organization
sub hierarchy_controller {  
  my($self,$sender) = @_;

  my($sub_name)= (caller(0))[3];
	my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
	do_log($ll,"CUSTOM: %s Running hierarchy_controller()", $sub_name);
	do_log($ll,"CUSTOM: %s Processing sender hierarchy of <%s>", $sub_name, $sender);

  my($select_clause) = 'SELECT role, superior FROM users WHERE users.email=?';
  # list of actual arguments replacing '?' placeholders
  my(@args) = ( lc(untaint($sender)) ); # might be more than one argument so keep it in array
  
  do_log($ll,"CUSTOM: %s Args is %s", $sub_name, @args);

  my($role, $supervisor) = db_manager($self,$select_clause,@args);

  return ($role,$supervisor);
} # end hierarchy_controller()

# description:
# run sql query and return the result
# parameter(s):
# - $self : carrying DB connection/handler
# - $clause : SQL query
# - $args : argument/parameter for the $clause
# return:
# - @query_result : array of query result(s), may be one or many depending on the attribute specified in the $clause
sub db_manager {
  my($self,$clause,@args) = @_;

  my($sub_name)= (caller(0))[3];
  my($ll) = 2;  # log level (0 is the most important level, 1, 2,... 5 less so)
	do_log($ll,"CUSTOM: %s Running db_manager()", $sub_name);
  do_log($ll,"CUSTOM: %s Starting to query DB with the following query: %s", $sub_name, $clause);

  # do a SQL lookup
  my($conn_h) = $self->{'conn_h'};

  do_log($ll,"CUSTOM: %s Connection string is : %s", $sub_name, $conn_h);

  $conn_h->begin_work_nontransaction;  # (re)connect if not connected  
  $conn_h->execute($clause,@args);  # do the query

  my($a_ref);
  my(@query_result);

  while ( defined($a_ref=$conn_h->fetchrow_arrayref($clause)) ) {
      @query_result = @$a_ref; # get value from a_ref and dereference
      do_log($ll,"CUSTOM: %s SQL fields: %s", $sub_name, join(", ", @query_result));
  }  

  $conn_h->finish($clause)  if defined $a_ref;  # only if not all read

  return @query_result;
} # end db_manager

1;